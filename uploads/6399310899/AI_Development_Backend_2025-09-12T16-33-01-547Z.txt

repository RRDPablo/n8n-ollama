 Por favor, te presentaré los archivos correspondientes a cada tarea indicada por el Scrum Master:

1. Creación de la función sumar en el backend:
   - archivo: `backend/functions/sum.js`
   - código:
     ```javascript
     function sum(num1, num2) {
       return num1 + num2;
     }
     module.exports = { sum };
     ```

2. Despliegue de la función sumar en la API:
   - archivo: `backend/server.js`
   - código:
     ```javascript
     const functions = require('./functions');

     // Ruta para obtener la suma de dos números
     app.get('/sum', (req, res) => {
       const num1 = req.query.num1;
       const num2 = req.query.num2;
       if (isNaN(num1) || isNaN(num2)) {
         return res.status(400).send('Los números deben ser numéricos.');
       }
       const resultado = functions.sum(Number(num1), Number(num2));
       return res.json({ result: resultado });
     });
     ```

3. Integración de la función sumar en el frontend:
   - archivo: `frontend/src/components/Calculadora.js`
   - código:
     ```javascript
     import React, { useState } from 'react';
     import axios from 'axios';

     const Calculadora = () => {
       const [num1, setNum1] = useState('');
       const [num2, setNum2] = useState('');
       const [resultado, setResultado] = useState(0);

       // Método para sumar dos números y actualizar el resultado
       const sumar = () => {
         axios.get(`/api/sum?num1=${num1}&num2=${num2}`)
           .then((response) => setResultado(response.data.result));
       }
       // ... (resto del código)
     };
     ```

A continuación, te presentaré las tareas para la función restar, multiplicar y dividir:

2. Creación de la función restar en el backend:
   - archivo: `backend/functions/restar.js`
   - código:
     ```javascript
     function restar(num1, num2) {
       return num1 - num2;
     }
     module.exports = { restar };
     ```

3. Despliegue de la función restar en la API:
   - archivo: `backend/server.js`
   - código:
     ```javascript
     const functions = require('./functions');

     // Ruta para obtener la resta de dos números
     app.get('/restar', (req, res) => {
       const num1 = req.query.num1;
       const num2 = req.query.num2;
       if (isNaN(num1) || isNaN(num2)) {
         return res.status(400).send('Los números deben ser numéricos.');
       }
       const resultado = functions.restar(Number(num1), Number(num2));
       return res.json({ result: resultado });
     });
     ```

3. Integración de la función restar en el frontend:
   - archivo: `frontend/src/components/Calculadora.js`
   - código:
     ```javascript
     // ... (código anterior)
     const restar = () => {
       axios.get(`/api/restar?num1=${num1}&num2=${num2}`)
         .then((response) => setResultado(response.data.result));
     }
     // ... (resto del código)
     ```

4. Creación de la función multiplicar en el backend:
   - archivo: `backend/functions/multiplicar.js`
   - código:
     ```javascript
     function multiplicar(num1, num2) {
       return num1 * num2;
     }
     module.exports = { multiplicar };
     ```

5. Despliegue de la función multiplicar en la API:
   - archivo: `backend/server.js`
   - código:
     ```javascript
     const functions = require('./functions');

     // Ruta para obtener la multiplicación de dos números
     app.get('/multiplicar', (req, res) => {
       const num1 = req.query.num1;
       const num2 = req.query.num2;
       if (isNaN(num1) || isNaN(num2)) {
         return res.status(400).send('Los números deben ser numéricos.');
       }
       const resultado = functions.multiplicar(Number(num1), Number(num2));
       return res.json({ result: resultado });
     });
     ```

6. Integración de la función multiplicar en el frontend:
   - archivo: `frontend/src/components/Calculadora.js`
   - código:
     ```javascript
     // ... (código anterior)
     const multiplicar = () => {
       axios.get(`/api/multiplicar?num1=${num1}&num2=${num2}`)
         .then((response) => setResultado(response.data.result));
     }
     // ... (resto del código)
     ```

7. Creación de la función dividir en el backend:
   - archivo: `backend/functions/dividir.js`
   - código:
     ```javascript
     function dividir(num1, num2) {
       return num1 / num2;
     }
     module.exports = { dividir };
     ```

8. Despliegue de la función dividir en la API:
   - archivo: `backend/server.js`
   - código:
     ```javascript
     const functions = require('./functions');

     // Ruta para obtener la división de dos números
     app.get('/dividir', (req, res) => {
       const num1 = req.query.num1;
       const num2 = req.query.num2;
       if (isNaN(num1) || isNaN(num2)) {
         return res.status(400).send('Los números deben ser numéricos.');
       }
       const resultado = functions.dividir(Number(num1), Number(num2));
       if (resultado === Infinity) {
         return res.status(400).send('No se puede dividir por cero.');
       }
       return res.json({ result: resultado });
     });
     ```

8. Integración de la función dividir en el frontend:
   - archivo: `frontend/src/components/Calculadora.js`
   - código:
     ```javascript
     // ... (código anterior)
     const dividir = () => {
       axios.get(`/api/dividir?num1=${num1}&num2=${num2}`)
         .then((response) => setResultado(response.data.result));
     }
     // ... (resto del código)
     ```

Finalmente, te presentaré la tarea para el botón de comprobar el resultado:

5. Creación del botón para comprobar el resultado en el frontend:
   - archivo: `frontend/src/components/Calculadora.js`
   - código:
     ```javascript
     // ... (código anterior)
     const sumar = () => {
       axios.get(`/api/sumar?num1=${num1}&num2=${num2}`)
         .then((response) => setResultado(response.data.result));
     };
     // ... (resto del código)

     const Calculadora = () => {
       // ... (código anterior)
       return (
         <div className="App">
           <h1>Calculadora</h1>
           <form>
             <label htmlFor="num1">Numero 1:</label>
             <input type="text" id="num1" value={num1} onChange={e => setNum1(e.target.value)} />
             <label htmlFor="num2">Numero 2:</label>
             <input type="text" id="num2" value={num2} onChange={e => setNum2(e.target.value)} />
           </form>
           <button onClick={() => sumar()}>Sumar</button>
           <button onClick={() => restar()}>Restar</button>
           <button onClick={() => multiplicar()}>Multiplicar</button>
           <button onClick={() => dividir()}>Dividir</button>
           <p>{resultado}</p>
         </div>
       );
     };
     export default Calculadora;
     ```